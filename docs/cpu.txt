### Registers

#### Status/Control SC register
Interrupts Off/On, Paging Off/On, Privileged/Unprivileged, Secure/Not secure
ALU STATUS: Carry, Zero, Negative - no need to save in actual status reg.
#### Interrupt register -
Level triggered, but latched on each falling clock, each device will assert until ack comes and it decides to stop asserting.
Note this means devices need to assert the line until they get serviced (level triggered). Latch on the falling clock so that the control logic can start reacting to interrupt changes as soon as possible.
- Timer
- Software (e.g. syscall)
- Keyboard
- Mouse
- Network
- Storage?

#### Opcode register - write only

### ALU:
Functional:

Shifter:

### Control signals
IN plane:
	NONE

REG plane:

OUT plane:
	NONE

MULTI:
  RESET: NCLK
  Reset uop counter: NCLK
  CARRY_IN

### TLB:
5 bits of TLB stored in compressed instr / register,

### Timer:
74VHC161 x 14 for 56 bits of timer.

### Instructions

General purpose regs:
- TODO: Need some kind of check on these, e.g. if include page or w/e in them? Or make those special regs?
r0: Stack pointer
r1: Program counter

TODO: Need to enforce privileged mode for subset of registers.
TODO: Use remaining register file contents as TLB somehow?
