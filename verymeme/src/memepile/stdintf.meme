intf BinaryArith<A, B> {
  fn add(o: &const A) A;
}

intf UnaryArith<T> {
  fn postinc() T;
}

intf Comparable<T> {
  fn eq(o: &const T) bool;
  fn neq(o: &const T) bool;
}

intf Indexable<I, T> {
  fn index(idx: &I) &T;
}

intf Convertible<A, B> {
  fn from(v: &const A) B;
}

// TODO: do this? e.g. for automatic decay to pointer?
intf ImplicitConvertible<A, B> {
  fn from_implicit(v: &const A) B;
}
