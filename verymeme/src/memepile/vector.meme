struct Vector<T> {
  data: *T,
  len: u32,
  cap: u32,
}

impl<T> Vector<T> {
  static fn new() Vector<T> {
    ret {
      data: *T{},
      len: 0u,
      cap: 0u,
    };
  }

  fn push(val: &const T) {
    if self.len == self.cap {
      self.cap = self.cap * 2u;
      newdata := malloc<T>(self.cap * sizeof(T));
      for i := 0u; i < self.len; ++i {
        newdata[i] = self.data[i];
      }
      free(self.data);
      self.data = newdata;
    }
    self.data[self.len++] = val;
  }

  fn pop() T {
    --self.len;
    ret self.data[self.len];
  }

  fn clear() {
    free(self.data);
    self.len = 0u;
    self.cap = 0u;
  }
}

impl<I, T> Indexable<I, T> for Vector<T> {
  fn index(idx: &const I) &T {
    ret self.data[idx];
  }
}

// TODO: destructors
//impl<T> Destructible<T> for Vector<T> {
//  fn destroy() {
//    for i := 0; i < len; i++ {
//      data_[i].destroy();
//    }
//    free(data_);
//  }
//}
