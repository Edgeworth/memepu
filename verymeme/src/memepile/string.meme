fn strlen(s: *u8) u32 {
  len := 0u;
  while s[len++] != 0 {}
  ret len;
}

fn print_cstr(s: *u8) {
  while *s != 0 {
    printf("%c", *(s++));
  }
}

fn print_str(s: *string) {
  for i := 0u; i < s.len; ++i {
    printf("%c", (*s)[i]);
  }
}

struct string {
  data: *u8,
  len: u32,
}

impl string {
  static fn new(s: *u8) string {
    ret string.new(s, strlen(s));
  }
  static fn new(s: *u8, len: u32) string {
    data := malloc<u8>(len);
    memcpy(data, s, len);
    ret {data: data, len: len};
  }
  fn resize(len: u32) {
    free<u8>(this.data);
    this.data = malloc<u8>(len);
    this.len = len;
  }
}

impl<I> Indexable<I, u8> for string {
  fn index(idx: *I) *u8 {
    ret &this.data[*idx];
  }
}

impl BinaryArith<string, string> for string {
  fn add(o: *string) string {
    tmp := string{};
    tmp.resize(this.len + o.len);
    memcpy(tmp.data, this.data, this.len);
    memcpy(tmp.data + this.len, o.data, o.len);
    ret tmp;
  }
}
