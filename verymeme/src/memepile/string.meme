fn strlen(s: *u8) u32 {
  len := 0u;
  while s[len++] != 0 {}
  ret len;
}

fn print_cstr(s: *u8) {
  while *s != 0 {
    printf("%c", *(s++));
  }
}

fn print_str(s: *string) {
  printf("string len: %d\n", s.len);
  ret;
  for i := 0u; i < s.len; ++i {
    printf("%c", (*s)[i]);
  }
}

struct string {
  data: *u8,
  len: u32,
}

impl string {
  static fn new(s: *u8) string {
    len := strlen(s);
    data := malloc<u8>(len);
    memcpy(data, s, len);
    ret {data: data, len: len};
  }
}

impl<I> Indexable<I, u8> for string {
  fn index(idx: *I) *u8 {
    ret &this.data[*idx];
  }
}
