fn strlen(s: *u8) u32 {
  len := 0u;
  while s[len++] != 0 {}
  ret len;
}

fn print_cstr(s: *u8) {
  while *s != 0 {
    printf("%c", *(s++));
  }
}

fn print_str(s: &const String) {
  for i := 0u; i < s.len; ++i {
    printf("%c", s[i]);
  }
}

fn is_space(c: u8) bool {
  ret c == ' ' || c == '\t' || c == '\n' || c == '\v' || c == '\f' || c == '\r';
}

struct String {
  data: *u8,
  len: u32,
}

impl String {
  static fn new(s: *u8) String {
    ret String.new(s, strlen(s));
  }

  static fn new(s: *u8, len: u32) String {
    data := malloc<u8>(len);
    memcpy(data, s, len);
    ret {data: data, len: len};
  }

  fn resize(len: u32) {
    free<u8>(self.data);
    self.data = malloc<u8>(len);
    self.len = len;
  }

  fn clear() {
    self = String{};
  }
}

impl<I> Indexable<I, const u8> for const String {
  fn index(idx: &const I) &const u8 {
    ret self.data[idx];
  }
}

impl BinaryArith<String, String> for const String {
  fn add(o: &const String) String {
    tmp := String{};
    tmp.resize(self.len + o.len);
    memcpy(tmp.data, self.data, self.len);
    memcpy(tmp.data + self.len, o.data, o.len);
    ret tmp;
  }
}
