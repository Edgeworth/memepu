// fn readf(data: *u8, size: i32) i32 {}

intf UnaryArith<T> {
  fn postinc(v: *T) T;
}

impl<T> UnaryArith<*T> for *T {
  fn postinc(v: **T) *T {
    var tmp: *T = *v;
    *v = *v + sizeof(**v);
    return tmp;
  }
}

intf Indexable<I, T> {
  fn index(idx: *I) *T;
}

intf Comparable<T> {
  fn neq(o: *T) bool;
}

impl Comparable<i32> for u8 {
  fn neq(o: *i32) bool {
    return i32(*this) != *o;
  }
}

fn strlen(s: *u8) u32 {
  var len: u32 = 0u;
  while (s[len++] != 0) {}
  return len;
}

struct string {
  data: *u8;
  len: u32;

  static fn new(s: *u8) string {
    return {data: s, len: strlen(s)};
  }
}

impl<T> Indexable<I, u8> for string {
  fn index(idx: *I) *u8 {
    return &data[idx];
  }
}

fn print_cstr(s: *u8) {
  while (*s != 0) {
    printf("%c", *(s++));
  }
}

fn main() i32 {
  var SIZE: u32 = 128u;
  var data: [SIZE]u8;
  var nbytes: u32 = readf(&data[0], SIZE);
  printf("got %d bytes: ", nbytes);
  print_cstr(&data[0]);
  printf("\n");
  printf("strlen result: %d\n", strlen(&data[0]));
  return 0;
}
