grammar memelang;
file : (intf_defn | struct_defn | fn_defn | enum_defn | impl_defn)* EOF;

// Top level constructs:
intf_defn : 'intf' typename intf_blk ;
struct_defn : 'struct' typename struct_blk ;
enum_defn : 'enum' typename enum_blk ;
impl_defn : 'impl' typelist? type ('for' type)? impl_blk ;
fn_defn : fn_signature stmt_blk ;

// Block related:
stmt_blk : LBRACE stmt* RBRACE ;
struct_blk : LBRACE (member_var_decl ',')* RBRACE ;
impl_blk : LBRACE ('static'? fn_defn)* RBRACE ;
intf_blk : LBRACE fn_decl* RBRACE ;
enum_blk : LBRACE ((IDENT | member_var_decl) ',')* RBRACE ;  // No type means no associated data.
// TODO: Ranges / OR / values / tuples / destructuring?
match_blk : LBRACE ((IDENT | literal) ':' stmt_blk)* RBRACE ;

// Statement related:
stmt : expr ';' | stmt_var_defn | stmt_ret | stmt_for | stmt_if | stmt_while | stmt_match |
  stmt_import | ASM ;
stmt_ret : 'ret' expr? ';' ;
stmt_for : 'for' stmt_var_defn expr ';' expr stmt_blk ;
stmt_while : 'while' expr stmt_blk ;
stmt_if : 'if' expr stmt_blk ('else' stmt_if)* ('else' stmt_blk)? ;
stmt_match : 'match' expr match_blk ;
stmt_import : 'import' STR_LIT ;

// Type related:
typebound : IDENT ; // TODO: Support complex type bounds?
typelist : '<' typebound (',' typebound)* '>' ;
// Identifies a kind of type (e.g. struct name, intf name, enum name, function name).
typename : IDENT typelist? ;
qualifier : 'const'? '*' | '[' expr ']';  // expr must be constant at compile time
unqualified_type : (IDENT ('<' type (',' type)* '>')?) ;
// Identifies a concrete type - can include type accessors (e.g. namespace, enum).
type : '&'? qualifier* 'const'? ((unqualified_type '.')* unqualified_type) ;

// Variable related:
member_var_decl : IDENT ':' type;
fn_var_decl : IDENT ':' type;
stmt_var_defn : IDENT ':=' expr ';' | IDENT ':' ('const' | type) '=' expr ';' ;

// Function related:
fn_decl : fn_signature ';' ;  // Only allowed in interfaces.
fn_signature : 'fn' typename
    ('()' | '(' fn_var_decl (',' fn_var_decl)* ')') type? ;

// Expression related:
literal : STR_LIT | CHAR_LIT | int_lit | float_lit | bool_lit | compound_lit;
compound_lit : type? LBRACE RBRACE
  | type? LBRACE ((IDENT ':' expr ',')* (IDENT ':' expr)
  | (expr ',')* expr) RBRACE ;
ref : IDENT | unqualified_type ;  // Reference can either be to a variable or to a typevalue.
expr : expr '[' expr ']'  // Array subscript
    | expr ('()' | '(' expr (',' expr)* ')')  // Function call
    | expr '.' ref  // Member access
    | expr '?'  // Result syntactic sugar
    | expr postfix_op  // Postfix operations
    | <assoc=right> prefix_op expr  // Prefix operations
    | expr binary_op expr  // Binary operations
    | <assoc=right> expr '?' expr ':' expr  // Ternary expression
    | <assoc=right> expr '=' expr  // Assignment
    | '(' expr ')' // Grouped expression
    | ref | literal ;

// Terminals:
// Parse << and >> as two separate tokens to allow stuff like vector<vector<T>>.
binary_op : '*' | '/' | '%' | '+' | '-' | '>' '>' '>' | '>' '>' | '<' '<' | '<=' | '>=' | '<' | '>'
    | '==' | '!=' |  '&' | '^' | '|' | '&&' | '||';
prefix_op : '+' '+' | '-' '-' | '~' | '-' | '!' | '&' | '*' ;
postfix_op : '+' '+' | '-' '-' ;
NUMBERS : [0-9]+ ;
int_lit : '0x'? NUMBERS 'u'?;
float_lit : NUMBERS '.' NUMBERS ;
CHAR_LIT  : '\'' (~[\t\r\n] | ESCAPE) '\'' ;
STR_LIT : ('"' ~[\t\r\n]* '"')+ ;  // Allow literal concat.
bool_lit : 'false' | 'true' ;
WHITESPACE : [ \t\r\n]+ -> skip ;
COMMENT : '//' ~[\n]* -> skip;
IDENT : [a-zA-Z_]+[a-zA-Z0-9_]* ;
LBRACE : '{' ;
RBRACE : '}' ;
ASM : 'asm' [ \t\r\n]* '{' ~[}]* '}' ;
ESCAPE : '\\' [\\'"nrt] ;
