name = memelang
file_extensions [] = meme;

// Foreground #F8F8F2
// Grey #75715E
// Red #F92672
// Orange #FD971F
// Light Orange #E69F66
// Yellow #E6DB74
// Green #A6E22E
// Blue #66D9EF
// Purple #AE81FF

styles [] {
.comment : style {
  color = #75715E
  textmate_scope = comment.line
  pygments_scope = Comment.Single
}
.keyword : style {
  color = #F92672
  textmate_scope = keyword
  pygments_scope = Keyword.Reserved
}
.keyword_operator : style {
  color = white
  textmate_scope = keyword.operator
  pygments_scope = Operator
}
.constant_numeric : style {
  color = #AE81FF
  textmate_scope = constant.numeric
  pygments_scope = Number
}
.constant : style {
  color = #F92672
  textmate_scope = constant.language
  pygments_scope = Keyword.Constant
}
.storage_type : style {
  color = #66D9EF
  textmate_scope = storage.type
  pygments_scope = Keyword.Type
}
.storage_modifier : style {
  color = #F92672
  textmate_scope = storage.modifier
  pygments_scope = Keyword.Declaration
}
.entity_function : style {
  color = #A6E22E
  textmate_scope = entity.name.function
  pygments_scope = Name.Function
}
.entity_struct : style {
  color = #A6E22E
  textmate_scope = entity.name.struct
  pygments_scope = Name.Class
}
.entity_enum : style {
  color = #A6E22E
  textmate_scope = entity.name.enum
  pygments_scope = Name.Class
}
.entity_interface : style {
  color = #A6E22E
  textmate_scope = entity.name.interface
  pygments_scope = Name.Class
}
.entity_impl : style {
  color = #A6E22E
  textmate_scope = entity.name.impl
  pygments_scope = Name.Class
}
.variable_function : style {
  color = #66D9EF
  textmate_scope = variable.function
  pygments_scope = Name.Variable
}
.punctuation : style {
  color = white
  textmate_scope = punctuation
  pygments_scope = Punctuation
}
.punctuation_separator : style {
  color = white
  textmate_scope = punctuation.separator
  pygments_scope = Punctuation
}
.punctuation_terminator : style {
  color = white
  textmate_scope = punctuation.terminator
  pygments_scope = Punctuation
}
.string_begin : style {
  color = #E6DB74
  textmate_scope = punctuation.definition.string.begin
  pygments_scope = String
}
.string_end : style {
  color = #E6DB74
  textmate_scope = punctuation.definition.string.end
  pygments_scope = String
}
.string_quoted_single : style {
  color = #E6DB74
  textmate_scope = string.quoted.single
  pygments_scope = String.Single
}
.string_quoted_double : style {
  color = #E6DB74
  textmate_scope = string.quoted.double
  pygments_scope = String.Double
}
.escaped : style {
  color = #AE81FF
  textmate_scope = constant.character.escape
  pygments_scope = String.Escape
}
.other : style {
  color = #F8F8F2
  textmate_scope = source
  pygments_scope = Generic
}
.illegal : style {
  color = #F8F8F2
  background_color = red
  textmate_scope = invalid
  pygments_scope = Generic.Error
}
}

__ident = ([a-zA-Z_]+[a-zA-Z0-9_]*)
__escape = (\\\\(?:\\\\|'|"|t|r|n))

contexts [] {
main : context {
  : pattern {
    regex \= (//.*)
    styles [] = .comment;
  }

  // TODO: Templates
  : pattern {
    regex \= (fn)(\s+)$${__ident}
    styles [] = .storage_type, .other, .entity_function;
  }

  : pattern {
    regex \= (intf)(\s+)$${__ident}
    styles [] = .storage_type, .other, .entity_interface;
  }

  : pattern {
    regex \= (impl)(\s+)$${__ident}
    styles [] = .storage_type, .other, .entity_impl;
  }

  : pattern {
    regex \= (struct)(\s+)$${__ident}
    styles [] = .storage_type, .other, .entity_struct;
  }

  : pattern {
    regex \= (enum)(\s+)$${__ident}
    styles [] = .storage_type, .other, .entity_enum;
  }

  : pattern {
    regex \= (var|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|bool|impl|intf|struct|enum|fn|asm)
    styles [] = .storage_type;
  }

  : pattern {
    regex \= (static|auto|const)
    styles [] = .storage_modifier;
  }

  : pattern {
    regex \= (ret|for|while|if|else|match|import)
    styles [] = .keyword;
  }

  : pattern {
    regex \= $${__ident}(\s*)(\()
    styles [] = .variable_function, .other, .punctuation;
  }

  : pattern {
    regex \= (\b\d+u?)
    styles [] = .constant_numeric;
  }

  : pattern {
    regex \= (true|false)
    styles [] = .constant;
  }

  : inline_push {
    regex \= (\{)
    styles [] = .punctuation;
    : pop {
      regex \= (\})
      styles [] = .punctuation;
    }
    : include "main" ;
  }

  : pattern {
    regex \= ([:=<>\-+*/%|!&.?~^])
    styles [] = .keyword_operator;
  }

  : pattern {
    regex \= ([(){}<>\[\]])
    styles [] = .punctuation;
  }

  : pattern {
    regex \= ([,:])
    styles [] = .punctuation_separator;
  }

  : pattern {
    regex \= ([;])
    styles [] = .punctuation_terminator;
  }

  : inline_push {
    regex \= (\")
    styles [] = .string_begin;
    : pop {
      regex \= (\")
      styles [] = .string_end;
    }
    : pattern {
      regex \= $${__escape}
      styles [] = .escaped;
    }
    : pattern {
      regex \= ([^"\\]+)
      styles [] = .string_quoted_double;
    }
  }

  : inline_push {
    regex \= (\')
    styles [] = .string_begin;
    : pop {
      regex \= (\')
      styles [] = .string_end;
    }
    : pattern {
      regex \= $${__escape}
      styles [] = .escaped;
    }
    : pattern {
      regex \= ([^'\\]+)
      styles [] = .string_quoted_single;
    }
  }

  : pattern {
    regex \= $${__ident}
    styles [] = .other;
  }

  : pattern {
    regex \= ([^\s])
    styles [] = .illegal;
  }
}
}
