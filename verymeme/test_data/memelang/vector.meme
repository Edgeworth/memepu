enum Unit {}

intf Convertible<A, B> {
  fn convert() B;
}

intf Iterator<T> {
  fn next() *T;
}

intf Iterable<T> {
  fn iter() Iterator<T>;
}

intf Movable<T> {
  fn move_into(*T o) Unit;
}

intf Destructible<T> {
  fn destroy() Unit;
}

intf Indexable<T> {
  fn index(i32 index) *T;
}

struct vector_iter<T> {
  *vector<T> vec_;
  i16 idx_;

  fn next() *T {
    if idx_ == vec_.size() {
      return nullptr;
    }
    idx_ = idx_ + 1;
    return vec_[idx_ - 1];
  }

  static fn new(*vector<T> vec) vector_iter<T> {
    return vector_iter<T> {
      vec_: vec,
      idx_: 0,
    };
  }
}

struct vector<T> {
  *T data_;
  i16 size_;
  i16 cap_;

  fn push(T val) Unit {
    if size_ == cap_ {
      cap_ = cap_ * 2;
      *T newdata = malloc(cap_ * sizeof(T));
      for i16 i = 0; i < size_; i = i + 1 {
        newdata[i] = data_[i].move();
      }
      free(data_);
      data_ = newdata;
    }

    size_ = size_ + 1;
    data_[size_ - 1] = val;
  }

  fn pop() T {
    size_ = size_ - 1;
    return data_[size_].move();
  }

  fn size() i16 {
    return size_;
  }

  static fn new() vector<T> {
    return vector<T>{
      data_: nullptr,
      size_: 0,
      cap_: 0,
    };  // RVO
  }
}

impl<T> Iterable<T> for vector<T> {
  fn iter() vector_iter<T> {
    return vector_iter<T>.new(this);
  }
}

impl<T> Movable<T> for vector<T> {
  fn move_into(*vector<T> o) Unit {
    o.data_ = data_;
    o.size_ = size_;
    o.cap_ = cap_;
    data_ = nullptr;
    size_ = 0;
    cap_ = 0;
  }
}

impl<T> Destructible<T> for vector<T> {
  fn destroy() Unit {
    for i16 i = 0; i < size; i = i + 1 {
      data_[i].destroy();
    }
    free(data_);
  }
}

impl<T> Indexable for vector<T> {
  fn index(i32 index) *T {
    return data_[index];
  }
}

fn swap<T>(*T a, *T b) Unit {
  T c = T{};
  a.move_into(&c);
  b.move_into(a);
  c.move_into(b);
}

fn bubblesort<T>(*vector<T> v) Unit {
  for i32 i = 0; i < v.size(); i++ {
    for i32 j = 0; j < v.size() - 1; j++ {
      if v[j] > v[j + 1] {
        swap(v[j], v[j + 1]);
      }
    }
  }
}

fn main() int8 {
    auto v = vector<int8>.new();
    v.push(4);
    v.push(3);
    v.push(1);
    bubblesort(&v);
    v[0] = v[0] << 2;
    return 1;
}
