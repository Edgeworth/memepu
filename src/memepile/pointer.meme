impl<T> BinaryArith<*T, u32> for *T {
  fn add(o: &u32) *T {
    ret self + *T{o};
  }
}

impl<T> UnaryArith<*T> for *T {
  fn postinc() *T {
    tmp := self;
    self = self + sizeof(*self);
    ret tmp;
  }
}

impl<I, T> Indexable<I, *T> for *const T {
  fn index(idx: &const I) &const T {
    ret *(self + *T{idx * sizeof(*self)});
  }
}
