struct FileContents {
  filename: const String,
  data: const String,
}

impl FileContents {
  static fn new(filename: &const String, data: &const String) FileContents {
    ret {
      filename: filename,  // TODO: deep copy
      data: data,
    };
  }
}

enum TokType {
  PLUS, DPLUS, MINUS, DMINUS, IDENT,
}

struct Tok {
  type: TokType,
  loc: i32,
  size: i32,
  int: i32,  // TODO: i64
  str: String,
}

impl Tok {
  fn to_str() String {
    ret String.new("Tok(") + self.str + String.new(")");  // TODO: add +=
  }
}

struct Tokeniser {
  cts: &const FileContents,
  toks: Vector<Tok>,
  curtok_: String,
}

impl Tokeniser {
  static fn new(cts: &const FileContents) Tokeniser {
    ret {cts: cts, toks: Vector<Tok>.new(), curtok_: String{}};
  }

  fn tokenise() Vector<Tok> {
   // for i := 0u; i < self.cts.data.len; ++i {
   //   if !is_print(self.cts.data[i]) && self.cts.data[i] != '\n'  {
        // ERROR
    //    ret Vector.new();
   //   }
   // }

    for i := 0u; i < self.cts.data.len; ++i {
      if is_space(self.cts.data[i]) {
        self.push_curtok_();
      } else {
        self.curtok_.push(self.cts.data[i]);
      }
    }
    self.push_curtok_();
    ret self.toks;  // TODO: copy constructor etc?
  }

  fn push_curtok_() {
    if self.curtok_.len != 0u {
      // TODO: make copy / move_into or something
      self.toks.push(Tok{type: TokType.IDENT, loc: 0, size: 0, int: 0, str: self.curtok_});
      self.curtok_.clear();
    }
  }
}
